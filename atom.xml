<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuyue31.github.io/</id>
    <title>小刻的家</title>
    <updated>2023-07-08T16:36:09.771Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuyue31.github.io/"/>
    <link rel="self" href="https://yuyue31.github.io/atom.xml"/>
    <subtitle>我要吃蜜饼zzzzzz</subtitle>
    <logo>https://yuyue31.github.io/images/avatar.png</logo>
    <icon>https://yuyue31.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 小刻的家</rights>
    <entry>
        <title type="html"><![CDATA[小刻bot3.0版本目录——前瞻版]]></title>
        <id>https://yuyue31.github.io/mvPged8LR/</id>
        <link href="https://yuyue31.github.io/mvPged8LR/">
        </link>
        <updated>2023-07-08T15:45:08.000Z</updated>
        <content type="html"><![CDATA[<p>首先非常感谢Rosalindlo美工大佬，在百忙之中将作品💯做了出来，十分感谢👍👍👍</p>
<p>3.0相比于2.0多了一些功能，其中最大的变化就是装载了冰祈佬的作品，感谢冰祈佬的作品</p>
<p>功能大致都写在后面了，直接喊就行了，还是不会请联系偷税</p>
<figure data-type="image" tabindex="1"><img src="https://yuyue31.github.io//post-images/1688831359928.png" alt="" loading="lazy"></figure>
<p>最后再次感谢Rosalindlo美工大佬，鞠躬鞠躬鞠躬❤️❤️❤️</p>
<figure data-type="image" tabindex="2"><img src="https://yuyue31.github.io//post-images/1688831813412.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[屑糖KonoDey的作品（一）]]></title>
        <id>https://yuyue31.github.io/L4WOzo7Rv/</id>
        <link href="https://yuyue31.github.io/L4WOzo7Rv/">
        </link>
        <updated>2023-07-08T15:39:05.000Z</updated>
        <content type="html"><![CDATA[<p>不废话，直接上图！</p>
<p><img src="https://yuyue31.github.io//post-images/1688831948355.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688831977749.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832036293.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832051081.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832057044.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832063378.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832067246.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832071424.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832075751.jpg" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688832080564.jpg" alt="" loading="lazy"></p>
<p>不知道有没有各位喜欢的角色，喜欢的话请多多支持大佬屑糖KonoDey</p>
<p>如果喜欢的角色不在里面，没有关系，直接找大佬</p>
<pre><code class="language-python">QQ:1348876659
</code></pre>
<p>ps：如果喜欢这位大佬请多多投喂御姐型的色图，广东人可以直接线下单杀（划掉）找他玩。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第三位登场的大佬——屑糖KonoDey]]></title>
        <id>https://yuyue31.github.io/SXth_BytF/</id>
        <link href="https://yuyue31.github.io/SXth_BytF/">
        </link>
        <updated>2023-07-08T15:37:21.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://yuyue31.github.io//post-images/1688830740052.png" alt="" loading="lazy"></figure>
<p>我是KonoDey，也可以叫我屑糖。爱好是跟愉悦贴贴捏，还有打游戏，搞搞电脑软件啥的。涩图喜欢的类型是偏御姐型的呢。</p>
<p>我设计了一些明日方舟的角色图，在设计的图中我采用了PRTS中的模型图用来做背景；在排版上我采用三种排版构图：</p>
<p>1.以左右为主色调的错落构图，采用颜色主要是该干员的主要构色，并在空缺的图上增加别样的文字；<br>
2.采用1/3构图，以精二立绘为背景并调节透明度来进行对比，在此图层上使用精一立绘进行嵌套，并添加各种元素；<br>
3.以精一为左侧，在以下图层做嵌套和透明化，并调节各种横条，以造成错位的视觉。</p>
<p>在之后的时间里尝试各种新型构图，鄙人还在努力进步中，希望大家能喜欢我的作品，谢谢！</p>
<p>ps：作品在下一个文章里</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rosalindlo美工大佬的作品（一）]]></title>
        <id>https://yuyue31.github.io/endir-yoQ/</id>
        <link href="https://yuyue31.github.io/endir-yoQ/">
        </link>
        <updated>2023-07-08T15:29:13.000Z</updated>
        <content type="html"><![CDATA[<p>下面展示下Rosalindlo大佬的设计图：</p>
<p><img src="https://yuyue31.github.io//post-images/1688831866427.JPG" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688831876793.JPG" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688830290199.JPG" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688831904016.JPG" alt="" loading="lazy"></p>
<p>喜欢的话请联系大佬约图哦~~</p>
<pre><code class="language-python">rokoshelver@qq.com
QQ：3142965455
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://yuyue31.github.io//post-images/1688831846160.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[偷税的垃圾作品（三）黑盒测试篇]]></title>
        <id>https://yuyue31.github.io/19klHAVtu/</id>
        <link href="https://yuyue31.github.io/19klHAVtu/">
        </link>
        <updated>2023-07-08T15:06:28.000Z</updated>
        <content type="html"><![CDATA[<p>真没想到还有第三期</p>
<p>感谢我的老师，有能力的话去支持下老师，b站up：白月黑羽编程<br>
(https://space.bilibili.com/401981380)<br>
(https://www.byhy.net/)</p>
<p>黑盒测试我采用了hytest软件，以下是它的优点：<br>
1.上手非常简单<br>
hytest 让大家直接用 Python 来写测试用例。<br>
如果你有 Python编程经验，1小时就可以上手，1天就可以灵活使用</p>
<p>2.操作直观易懂<br>
测试用例以 目录文件结构存放，清晰明了<br>
初始化清除 机制清晰灵活<br>
可以灵活地 挑选 要执行的测试用例</p>
<p>3.漂亮的测试报告</p>
<p>我特别喜欢第三点，下面展示一下测试报告的截图：<br>
<img src="https://yuyue31.github.io//post-images/1688829027037.png" alt="" loading="lazy"></p>
<p>#hytest的使用<br>
执行hytest 自动化非常简单：<br>
只需要新建一个 项目目录 ， 里面创建一个名为 cases 的子目录用来存放测试用例代码即可。</p>
<p>然后，打开命令行窗口cmd<br>
进入自动化代码根目录，也就是 cases 的上层目录 （注意不是cases目录，是cases的父目录）<br>
运行 hytest</p>
<pre><code class="language-python">python -m hytest.run
</code></pre>
<p>需要产生英文版的报告，只需要加上 参数 --lang=en</p>
<pre><code class="language-python">python -m hytest.run  --lang=en
</code></pre>
<p>不希望执行完测试后，自动打开测试报告，可以使用参数 --auto_open_report=no</p>
<pre><code class="language-python">hytest --auto_open_report=no
</code></pre>
<p>通常还需要创建一些其他的目录，比如<br>
lib 目录    用来存放 测试用例 需要使用的共享代码库。<br>
doc 目录    存放 一些说明文档</p>
<p>可以使用命令参数 --new 来创建一个 hytest 的自动化项目目录，里面会包含一个cases目录和一个示例代码文件。<br>
比如，执行</p>
<pre><code class="language-python">hytest --new auto1
</code></pre>
<p>就会在当前目录下创建名为 auto1 的 项目目录</p>
<p>##举个例子</p>
<pre><code class="language-python">from hytest import STEP, INFO, CHECK_POINT

class UI_0101:
      
    def teststeps(self):
        
        STEP(1,'打开浏览器')
        var1 = 'sdf'
        INFO(f'var1 is {var1}')
        CHECK_POINT('打开成功', var1.startswith('1sd') ) 

        
        STEP(2,'登录')        
        CHECK_POINT('检查登录是否成功', True) 
    
        STEP(3,'查看菜单') 
        CHECK_POINT('检查菜单是否正确', True)  
</code></pre>
<p>###STEP 函数</p>
<p>用来声明每个测试步骤，这样日志报告更清晰</p>
<p>###INFO 函数</p>
<p>用来打印一些信息在日志和报告中，方便出现问题时定位。</p>
<p>当然，如果你在开发调试阶段也可以直接使用print，在终端查看内容</p>
<p>###CHECK_POINT 函数</p>
<p>用来声明测试过程中的每个检查点，任何一个检查点不通过，整个测试用例就被认为不通过。</p>
<p>缺省情况下，一个检查点不通过，后面的测试代码就不会继续执行。</p>
<p>如果你希望 某个检查点即使不通过，后续代码仍然继续执行，可以使用参数 failStop=False ，如下所示</p>
<pre><code class="language-python">def teststeps(self):

     CHECK_POINT('即使不通过也不中止1', False, failStop=False)

     CHECK_POINT('即使不通过也不中止2', False, failStop=False)
</code></pre>
<p>具体的学习请看老师的视频(https://www.bilibili.com/video/BV1bK4y1D7KZ/?p=2)</p>
<p>##我的完整的测试用例：</p>
<pre><code class="language-python">import time

from selenium import webdriver

from hytest import STEP, INFO, CHECK_POINT

from selenium.webdriver.common.by import By# 创建 WebDriver 对象，指明使用chrome浏览器驱动
</code></pre>
<pre><code class="language-python">path = &quot;g:\tool&quot;
wd = webdriver.Edge()


wd.get('http://127.0.0.1/mgr/sign.html')# 调用WebDriver 对象的get方法 可以让浏览器打开指定网址
</code></pre>
<pre><code class="language-python">class UI_0001:
    name = &quot;不输入账号&quot;

    def teststeps(self):
        STEP(1, '不输入管理员账号')
        element = wd.find_element(By.ID, 'password')
        element1 = wd.find_element(By.ID, 'username')
        element.click()
        element.send_keys('88888888')
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(5)
        alert = wd.switch_to.alert.text
        CHECK_POINT('弹窗:请输入用户名', alert == '请输入用户名')
        wd.switch_to.alert.accept()
        element.clear()
        element1.clear()
</code></pre>
<pre><code class="language-python">class UI_0002:
    name = &quot;不输入密码&quot;

    def teststeps(self):
        STEP(1, &quot;不输入密码&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        denglu = wd.find_element(By.TAG_NAME, 'button')
        time.sleep(5)
        denglu.click()
        alert = wd.switch_to.alert.text
        CHECK_POINT('弹窗:请输入密码', alert == '请输入密码')
        wd.switch_to.alert.accept()
        element.clear()
        element1.clear()
</code></pre>
<pre><code class="language-python">class UI_0003:
    name = &quot;不存在的管理员账号byh&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byh和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byh')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(5)
        alert = wd.switch_to.alert.text
        CHECK_POINT('弹窗:登录失败 : 用户名或者密码错误', alert == '登录失败 : 用户名或者密码错误')
        wd.switch_to.alert.accept()
        element.clear()
        element1.clear()
</code></pre>
<pre><code class="language-python">class UI_0004:
    name = &quot;正确的管理员账号和错误的密码8888888&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码8888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;8888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(5)
        alert = wd.switch_to.alert.text
        CHECK_POINT('弹窗:登录失败 : 用户名或者密码错误', alert == '登录失败 : 用户名或者密码错误')
        wd.switch_to.alert.accept()
        element.clear()
        element1.clear()
</code></pre>
<pre><code class="language-python">class UI_0005:
    name = &quot;正确的管理员账号和错误的密码888888888&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码888888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;888888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(5)
        alert = wd.switch_to.alert.text
        CHECK_POINT('弹窗:登录失败 : 用户名或者密码错误', alert == '登录失败 : 用户名或者密码错误')
        wd.switch_to.alert.accept()
        element.clear()
        element1.clear()
</code></pre>
<pre><code class="language-python">class u1:
    ddt_cases = [
        {
            &quot;name&quot;: &quot;不输入密码&quot;,
            &quot;para&quot;: [&quot;byhy&quot;, None, &quot;请输入密码&quot;]
        },
        {
            &quot;name&quot;: &quot;不输入账户&quot;,
            &quot;para&quot;: [None, &quot;88888888&quot;, &quot;请输入用户名&quot;]
        },
        {
            &quot;name&quot;: &quot;输入账户byh和密码88888888&quot;,
            &quot;para&quot;: [&quot;byh&quot;, &quot;88888888&quot;, &quot;登录失败 : 用户名或者密码错误&quot;]
        },
        {
            &quot;name&quot;: &quot;输入账户byhy和密码888888888&quot;,
            &quot;para&quot;: [&quot;byhy&quot;, &quot;888888888&quot;, &quot;登录失败 : 用户名或者密码错误&quot;]
        }
    ]

    def teststeps(self):
        username, password, info = self.para
        if username is not None:
            wd.find_element(By.ID, &quot;username&quot;).send_keys(username)

        if password is not None:
            wd.find_element(By.ID, &quot;password&quot;).send_keys(password)

        wd.find_element(By.TAG_NAME, &quot;button&quot;).click()

        time.sleep(2)

        text = wd.switch_to.alert.text
        wd.switch_to.alert.accept()
        CHECK_POINT('弹出提示', text == info)

    def teardown(self):
        username = wd.find_element(By.ID, &quot;username&quot;)
        username.clear()
        password = wd.find_element(By.ID, &quot;password&quot;)
        password.clear()
</code></pre>
<pre><code class="language-python">class UI_0101:
    name = &quot;1. 使用正确的管理员账号、密码登录白月SMS系统\n2. 检查左侧菜单&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(5)

        STEP(2, &quot;检查左侧菜单&quot;)
        lan = wd.find_elements(By.CSS_SELECTOR, '.sidebar-menu li span')
        names = []
        for i in lan:
            names.append(i.text)
        CHECK_POINT(&quot;显示栏名称&quot;, names[:3] == ['客户', '药品', '订单'])
        time.sleep(4)
        wd.find_element(By.CSS_SELECTOR, &quot;.user-menu .dropdown-toggle&quot;).click()  # 点击管理员页面
        time.sleep(2)
        wd.find_element(By.CSS_SELECTOR, &quot;.dropdown-menu .user-footer .pull-right&quot;).click()  # 点击退出登录
        time.sleep(2)
</code></pre>
<pre><code class="language-python">class UI_0102:
    name = &quot;1. 使用正确的管理员账号、密码登录白月SMS系统\n2. 点击添加客户，输入客户名为 南京中医院 的客户&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(1)

        STEP(2, &quot;点击添加客户，输入客户名为 南京中医院 的客户&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.btn-md span&quot;).click()  # 添加按钮
        time.sleep(2)
        name = wd.find_elements(By.CSS_SELECTOR, &quot;.add-one-area .form-control&quot;)
        name[0].send_keys(&quot;南京中医院&quot;)
        name[1].send_keys(&quot;52276668&quot;)
        name[2].send_keys(&quot;江苏省南京市秦淮区大明路157号&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.add-one-area .btn-xs&quot;).click()  # 确定按钮
        time.sleep(1)
        yiyuan = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)  # 所有医院信息
        xianshi = []
        for i in yiyuan[:3]:
            xianshi.append(i.text)
        CHECK_POINT(&quot;显示三个东西&quot;, xianshi == [&quot;客户名：南京中医院&quot;, &quot;联系电话：52276668&quot;, &quot;地址：江苏省南京市秦淮区大明路157号&quot;])
        time.sleep(1)
        anniu = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .btn-group-sm .btn-xs&quot;)  # 删除新增的信息
        var = anniu[1]
        var.click()  # 弹窗点击确定
        time.sleep(1)
        alert = wd.switch_to.alert
        alert.accept()
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.user-menu .dropdown-toggle&quot;).click()  # 点击管理员页面
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.dropdown-menu .user-footer .pull-right&quot;).click()  # 点击退出登录
        time.sleep(1)
</code></pre>
<pre><code class="language-python">class UI_0103:
    name = &quot;1. 使用正确的管理员账号、密码登录白月SMS系统\n2. 点击添加客户，输入客户名为 南京中医院 的客户\n然后再点击编辑，修改客户名为：南京省中医院&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(1)

        STEP(2, &quot;点击添加客户，输入客户名为 南京中医院 的客户&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.btn-md span&quot;).click()  # 添加按钮
        time.sleep(2)
        name = wd.find_elements(By.CSS_SELECTOR, &quot;.add-one-area .form-control&quot;)
        name[0].send_keys(&quot;南京中医院&quot;)
        name[1].send_keys(&quot;52276668&quot;)
        name[2].send_keys(&quot;江苏省南京市秦淮区大明路157号&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.add-one-area .btn-xs&quot;).click()  # 确定按钮
        time.sleep(1)

        STEP(3, &quot;然后再点击编辑，修改客户名为：南京省中医院&quot;)
        wd.find_element(By.CSS_SELECTOR,
                        &quot;.search-result-item .search-result-item-actionbar .btn-group-sm .btn-outlined&quot;).click()  # 修改按钮
        time.sleep(2)
        rename = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .form-control&quot;)
        rename[0].clear()  # 清除内容
        rename[0].send_keys(&quot;南京省中医院&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.search-result-item-actionbar .btn-group-sm .btn-outlined&quot;).click()
        time.sleep(2)
        yiyuan = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)  # 所有医院信息
        xianshi = []
        for i in yiyuan[:3]:
            xianshi.append(i.text)
        time.sleep(1)
        CHECK_POINT(&quot;检查是否被修改&quot;, xianshi[0] == &quot;客户名：南京省中医院&quot;)
        time.sleep(2)
        anniu = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .btn-group-sm .btn-xs&quot;)  # 删除新增的信息
        var = anniu[1]
        var.click()
        time.sleep(1)
        alert = wd.switch_to.alert
        alert.accept()
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.user-menu .dropdown-toggle&quot;).click()  # 点击管理员页面
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.dropdown-menu .user-footer .pull-right&quot;).click()  # 点击退出登录
        time.sleep(1)
</code></pre>
<pre><code class="language-python">class UI_0105:
    name = &quot;1. 使用正确的管理员账号、密码登录白月SMS系统\n2. 点击添加药品，输入正确格式的 药品名、编号和 描述\n点击创建&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(1)

        STEP(2, &quot;点击添加药品，输入正确格式的 药品名、编号和 描述&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.main-sidebar .sidebar .sidebar-menu .fa-plus&quot;).click()
        time.sleep(2)
        wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .add-one-area .btn-outlined .glyphicon-plus&quot;).click()
        time.sleep(1)
        yaoname = wd.find_elements(By.CSS_SELECTOR, &quot;.col-md-8 .form-control&quot;)
        yaoname[0].send_keys(&quot;维A酸乳膏&quot;)
        yaoname[1].send_keys(&quot;H10930141&quot;)
        yaoname[2].send_keys(&quot;用于寻常痤疮、扁平苔疣、黏膜白斑、毛发红糠疹、毛囊角化病及银屑病的辅助治疗&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-12 .btn-xs&quot;).click()  # 确定按钮
        time.sleep(1)
        yao = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)
        yaolist = []
        for i in yao:
            yaolist.append(i.text)
        CHECK_POINT(&quot;检查药品信息&quot;, yaolist[:3] == ['药品：维A酸乳膏', '编号：H10930141', '描述：用于寻常痤疮、扁平苔疣、黏膜白斑、毛发红糠疹、毛囊角化病及银屑病的辅助治疗'])
        anniu = wd.find_element(By.CSS_SELECTOR, &quot;.search-result-item-actionbar .btn-group-sm label:nth-child(2)&quot;)
        anniu.click()
        time.sleep(1)
        alert = wd.switch_to.alert
        alert.accept()
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.user-menu .dropdown-toggle&quot;).click()  # 点击管理员页面
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.dropdown-menu .user-footer .pull-right&quot;).click()  # 点击退出登录
        time.sleep(1)
</code></pre>
<pre><code class="language-python">class UI_0106:
    name = &quot;1. 使用正确的管理员账号、密码登录白月SMS系统\n2. 点击页脚处 链接 白月黑羽教学使用，点击访问官网\n&quot; \
           &quot;然后 在新打开的 白月黑羽教学网页，获取 页眉导航菜单中所有教程类目（ 可以调用webdriver对象的maximize_window()方法最大化窗口，&quot; \
           &quot;以便显示所有菜单 ）\n3. 随后再回到 白月SMS系统网页，点击退出登录&quot;

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(1)
        search = wd.current_window_handle

        STEP(2, &quot;点击页脚处 链接 白月黑羽教学使用，点击访问官网&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.main-footer .hidden-xs a:nth-child(1)&quot;).click()
        time.sleep(2)
        for handle in wd.window_handles:
            # 先切换到该窗口
            wd.switch_to.window(handle)
            # 得到该窗口的标题栏字符串，判断是不是我们要操作的那个窗口
            if '白夜黑羽' in wd.title:
                # 如果是，那么这时候WebDriver对象就是对应的该该窗口，正好，跳出循环，
                break
        wd.maximize_window()  # 放大窗口
        neirong = wd.find_elements(By.XPATH, &quot;//li[@class='nav-item']/a[@class='nav-link ']&quot;)
        list1 = []
        for i in neirong:
            list1.append(i.text)
        CHECK_POINT(&quot;对比目录的内容&quot;, list1 == ['Python基础', 'Python进阶', 'Qt图形界面', 'Django',
                                         '自动化测试', '性能测试', 'HTML/CSS', 'JS语言', 'JS Web'])

        STEP(3, &quot;再回到 白月SMS系统网页，点击退出登录&quot;)
        wd.switch_to.window(search)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.user-menu .dropdown-toggle&quot;).click()  # 点击管理员页面
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.dropdown-menu .user-footer .pull-right&quot;).click()  # 点击退出登录
        time.sleep(1)


ddt_cases = [
    {
        &quot;para&quot;: ['青霉素盒装1', 'YP-32342341', '青霉素注射液，每支15ml，20支装']
    },
    {
        &quot;para&quot;: ['青霉素盒装2', 'YP-32342342', '青霉素注射液，每支15ml，30支装']
    },
    {
        &quot;para&quot;: ['青霉素盒装3', 'YP-32342343', '青霉素注射液，每支15ml，40支装']
    }
]
</code></pre>
<pre><code class="language-python">ddt_cases2 = [
    {&quot;para&quot;: ['南京中医院1', '2551867851', '江苏省-南京市-秦淮区-汉中路-501']},
    {&quot;para&quot;: ['南京中医院2', '2551867852', '江苏省-南京市-秦淮区-汉中路-502']},
    {&quot;para&quot;: ['南京中医院3', '2551867853', '江苏省-南京市-秦淮区-汉中路-503']}

]


class UI_0107:

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(1)

        # 登录

        STEP(2, &quot;在系统中添加3种药品&quot;)

        for i in ddt_cases:
            wd.find_element(By.CSS_SELECTOR, &quot;.main-sidebar .sidebar .sidebar-menu .fa-plus&quot;).click()  # 点击药品
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR,
                            &quot;.container-fluid .add-one-area .btn-outlined .glyphicon-plus&quot;).click()  # 点击添加
            time.sleep(1)
            yaoname = wd.find_elements(By.CSS_SELECTOR, &quot;.col-md-8 .form-control&quot;)
            yaoname[0].send_keys(i['para'][0])
            yaoname[1].send_keys(i['para'][1])
            yaoname[2].send_keys(i['para'][2])
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-12 .btn-xs&quot;).click()  # 确定按钮
        time.sleep(2)
        yao = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)
        yaolist1 = []
        for x in yao:
            yaolist1.append(x.text)
        CHECK_POINT(&quot;检查是否添加成功&quot;, yaolist1[:9] == ['药品：青霉素盒装3', '编号：YP-32342343', '描述：青霉素注射液，每支15ml，40支装',
                                                 '药品：青霉素盒装2', '编号：YP-32342342', '描述：青霉素注射液，每支15ml，30支装',
                                                 '药品：青霉素盒装1', '编号：YP-32342341', '描述：青霉素注射液，每支15ml，20支装']
                    )

        STEP(3, &quot;在系统中添加3个客户&quot;)
        for i in ddt_cases2:
            wd.find_element(By.CSS_SELECTOR, &quot;.fa-user&quot;).click()  # 点击客户
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .add-one-area .btn-md .glyphicon-plus&quot;).click()  # 点击添加
            time.sleep(1)
            kehuname = wd.find_elements(By.CSS_SELECTOR, &quot;.col-sm-8 .form-control &quot;)
            kehuname[0].send_keys(i['para'][0])
            kehuname[1].send_keys(i['para'][1])
            kehuname[2].send_keys(i['para'][2])
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-12 .btn-xs&quot;).click()  # 点击创建
            time.sleep(1)
        kehuliest = []
        kehu = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field &quot;)
        for i in kehu:
            kehuliest.append(i.text)
        CHECK_POINT(&quot;检查信息是否正确&quot;,
                    kehuliest[:9] == ['客户名：南京中医院3', '联系电话：2551867853', '地址：江苏省-南京市-秦淮区-汉中路-503', '客户名：南京中医院2',
                                      '联系电话：2551867852', '地址：江苏省-南京市-秦淮区-汉中路-502', '客户名：南京中医院1', '联系电话：2551867851',
                                      '地址：江苏省-南京市-秦淮区-汉中路-501'])

        STEP(4, &quot;进入订单管理界面，添加一个订单&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.fa-paperclip&quot;).click()  # 点击订单
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .add-one-area .btn-md .glyphicon-plus&quot;).click()  # 添加按钮
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 .form-control&quot;).send_keys(&quot;南京中医院2&quot;)
        time.sleep(1)
        yiyuan = wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(2) .form-control&quot;).send_keys(&quot;南京中医院2\n&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.xxx option&quot;).click()
        yaopin = wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(3) .form-control&quot;).send_keys(&quot;青霉素盒装1\n&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(3) .xxx option&quot;).click()
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(3) input&quot;).send_keys(&quot;100&quot;)
        time.sleep(1)
        temporaryCacheButtonTime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))
        wd.find_element(By.CSS_SELECTOR, &quot;.content-wrapper .container-fluid .add-one-area .col-sm-12 .btn-xs&quot;).click()

        time.sleep(1)
        order = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)
        time.sleep(1)
        orderlist = []
        for i in order:
            orderlist.append(i.text)

        CHECK_POINT(&quot;检查是否正确&quot;, orderlist[:4] == ['订单：南京中医院2', f'日期：{temporaryCacheButtonTime}', '客户：南京中医院2',
                                                '药品：\n青霉素盒装1 * 100'])
        wd.find_element(By.CSS_SELECTOR, &quot;.user-menu .dropdown-toggle&quot;).click()  # 点击管理员页面
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.dropdown-menu .user-footer .pull-right&quot;).click()  # 点击退出登录
        time.sleep(1)
</code></pre>
<pre><code class="language-python">class UI_0108:

    def teststeps(self):
        STEP(1, &quot;输入账户byhy和密码88888888&quot;)
        element = wd.find_element(By.ID, 'username')
        element1 = wd.find_element(By.ID, 'password')
        element.click()
        element.send_keys('byhy')
        element1.click()
        element1.send_keys(&quot;88888888&quot;)
        denglu = wd.find_element(By.TAG_NAME, 'button')
        denglu.click()
        time.sleep(1)

        # 登录

        STEP(2, &quot;判断是不是空的&quot;)

        wd.find_element(By.CSS_SELECTOR, &quot;.fa-paperclip&quot;).click()  # 点击订单
        while True:
            try:
                wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .search-result-item&quot;).text
            except:
                break
            else:
                wd.find_element(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-actionbar .btn-xs&quot;).click()
                time.sleep(1)
                alert = wd.switch_to.alert
                alert.accept()
                time.sleep(1)

        wd.find_element(By.CSS_SELECTOR, &quot;.fa-user&quot;).click()
        while True:
            try:
                wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .search-result-item&quot;).text
            except Exception as e:
                break
            else:
                wd.find_element(By.CSS_SELECTOR,
                                &quot;.search-result-item .search-result-item-actionbar label:nth-child(2)&quot;).click()
                alert = wd.switch_to.alert
                alert.accept()
                time.sleep(1)

        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.main-sidebar .sidebar .sidebar-menu .fa-plus&quot;).click()  # 点击药品
        while True:
            try:
                wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .search-result-item&quot;).text
            except:
                break
            else:
                wd.find_element(By.CSS_SELECTOR,
                                &quot;.search-result-item .search-result-item-actionbar label:nth-child(2)&quot;).click()
                alert = wd.switch_to.alert
                alert.accept()
                time.sleep(1)

        wd.find_element(By.CSS_SELECTOR, &quot;.fa-paperclip&quot;).click()  # 点击订单
        order = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)  # 检查订单是不是空的
        orderlist = []
        for i in order:
            orderlist.append(i.text)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.fa-user&quot;).click()
        kehuliest = []
        kehu = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field &quot;)  # 检查客户是不是空的
        for i in kehu:
            kehuliest.append(i.text)
            time.sleep(1)

        wd.find_element(By.CSS_SELECTOR, &quot;.main-sidebar .sidebar .sidebar-menu .fa-plus&quot;).click()  # 点击药品
        yao = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)  # 检查药是不是空的
        yaolist1 = []
        for x in yao:
            yaolist1.append(x.text)
            time.sleep(1)

        CHECK_POINT(&quot;检查列表是不是为空&quot;, orderlist == [], kehuliest == [], yaolist1 == [])

        STEP(3, &quot;在系统中添加3种药品&quot;)

        for i in ddt_cases:
            wd.find_element(By.CSS_SELECTOR, &quot;.main-sidebar .sidebar .sidebar-menu .fa-plus&quot;).click()  # 点击药品
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR,
                            &quot;.container-fluid .add-one-area .btn-outlined .glyphicon-plus&quot;).click()  # 点击添加
            time.sleep(1)
            yaoname = wd.find_elements(By.CSS_SELECTOR, &quot;.col-md-8 .form-control&quot;)
            yaoname[0].send_keys(i['para'][0])
            yaoname[1].send_keys(i['para'][1])
            yaoname[2].send_keys(i['para'][2])
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-12 .btn-xs&quot;).click()  # 确定按钮
        time.sleep(2)
        yao = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)
        yaolist1 = []
        for x in yao:
            yaolist1.append(x.text)
        CHECK_POINT(&quot;检查是否添加成功&quot;, yaolist1[:9] == ['药品：青霉素盒装3', '编号：YP-32342343', '描述：青霉素注射液，每支15ml，40支装',
                                                 '药品：青霉素盒装2', '编号：YP-32342342', '描述：青霉素注射液，每支15ml，30支装',
                                                 '药品：青霉素盒装1', '编号：YP-32342341', '描述：青霉素注射液，每支15ml，20支装']
                    )

        STEP(4, &quot;在系统中添加3个客户&quot;)
        for i in ddt_cases2:
            wd.find_element(By.CSS_SELECTOR, &quot;.fa-user&quot;).click()  # 点击客户
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .add-one-area .btn-md .glyphicon-plus&quot;).click()  # 点击添加
            time.sleep(1)
            kehuname = wd.find_elements(By.CSS_SELECTOR, &quot;.col-sm-8 .form-control &quot;)
            kehuname[0].send_keys(i['para'][0])
            kehuname[1].send_keys(i['para'][1])
            kehuname[2].send_keys(i['para'][2])
            time.sleep(1)
            wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-12 .btn-xs&quot;).click()  # 点击创建
            time.sleep(1)
        kehuliest = []
        kehu = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field &quot;)
        for i in kehu:
            kehuliest.append(i.text)
        CHECK_POINT(&quot;检查信息是否正确&quot;,
                    kehuliest[:9] == ['客户名：南京中医院3', '联系电话：2551867853', '地址：江苏省-南京市-秦淮区-汉中路-503', '客户名：南京中医院2',
                                      '联系电话：2551867852', '地址：江苏省-南京市-秦淮区-汉中路-502', '客户名：南京中医院1', '联系电话：2551867851',
                                      '地址：江苏省-南京市-秦淮区-汉中路-501'])

        STEP(5, &quot;进入订单管理界面，添加一个订单&quot;)
        wd.find_element(By.CSS_SELECTOR, &quot;.fa-paperclip&quot;).click()  # 点击订单
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.container-fluid .add-one-area .btn-md .glyphicon-plus&quot;).click()  # 添加按钮
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 .form-control&quot;).send_keys(&quot;南京中医院2&quot;)
        time.sleep(1)
        yiyuan = wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(2) .form-control&quot;).send_keys(&quot;南京中医院2\n&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.xxx option&quot;).click()
        yaopin = wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(3) .form-control&quot;).send_keys(&quot;青霉素盒装1\n&quot;)
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(3) .xxx option&quot;).click()
        time.sleep(1)
        wd.find_element(By.CSS_SELECTOR, &quot;.col-sm-8 div:nth-child(3) input&quot;).send_keys(&quot;100&quot;)
        time.sleep(1)
        temporaryCacheButtonTime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))
        wd.find_element(By.CSS_SELECTOR, &quot;.content-wrapper .container-fluid .add-one-area .col-sm-12 .btn-xs&quot;).click()

        time.sleep(1)
        order = wd.find_elements(By.CSS_SELECTOR, &quot;.search-result-item .search-result-item-field&quot;)
        time.sleep(1)
        orderlist = []
        for i in order:
            orderlist.append(i.text)

        CHECK_POINT(&quot;检查是否正确&quot;, orderlist[:4] == ['订单：南京中医院2', f'日期：{temporaryCacheButtonTime}', '客户：南京中医院2',
                                                '药品：\n青霉素盒装1 * 100'])
</code></pre>
<p>##结尾<br>
太长了www，这个是基于白月黑羽SMS系统进行的测试，没啥说的，下面就是api接口的学习了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[偷税的垃圾作品（二）网页自动化篇]]></title>
        <id>https://yuyue31.github.io/f4HzDHY0o/</id>
        <link href="https://yuyue31.github.io/f4HzDHY0o/">
        </link>
        <updated>2023-07-08T14:56:12.000Z</updated>
        <content type="html"><![CDATA[<p>没错就是我们的新朋友 Selenium ！！！</p>
<p>Selenium 是一套 Web网站 的程序自动化操作 解决方案。</p>
<p>通过它，我们可以写出自动化程序，像人一样在浏览器里操作web界面。 比如点击界面按钮，在文本框中输入文字 等操作。</p>
<p>而且还能从web界面获取信息。 比如获取 火车、汽车票务信息，招聘网站职位信息，财经网站股票价格信息 等等，然后用程序进行分析处理。</p>
<p>其中最常用的一个是css，一个是Xpath。<br>
ps：我只学会了css呜呜呜呜</p>
<p>#举个栗子：<br>
题目：<br>
<img src="https://yuyue31.github.io//post-images/1688828679648.png" alt="" loading="lazy"></p>
<pre><code class="language-python">from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
</code></pre>
<pre><code class="language-python">driver = webdriver.Edge(r&quot;E:\py\tool\msedgedriver.exe&quot;)
driver.implicitly_wait(5)
driver.get('https://kyfw.12306.cn/otn/leftTicket/init')
</code></pre>
<pre><code class="language-python">fromEle = driver.find_element(By.ID, 'fromStationText')
fromEle.click()
fromEle.clear()
fromEle.send_keys('nanjingnan\n') # 写中文 '南京南' 不行，可能时网页里面代码的作用

toEle = driver.find_element(By.ID,'toStationText')

toEle.click()
toEle.clear()
toEle.send_keys('hangzhoudong\n')
</code></pre>
<pre><code class="language-python">timeSelect =  Select(driver.find_element(By.ID, 'cc_start_time'))# 输入开始时间
timeSelect.select_by_visible_text('06:00--12:00')
</code></pre>
<pre><code class="language-python">tomorrow = driver.find_element(By.CSS_SELECTOR, '#date_range li:nth-child(2)')
tomorrow.click()# 点击这个，就会搜索车次了
</code></pre>
<h2 id="方法二用css实现获取二等座有票的车次信息">方法二：用css实现获取二等座有票的车次信息</h2>
<pre><code class="language-python">print('\n\n\n===============================\n\n\n')
theTrainLines = driver.find_elements(By.CSS_SELECTOR,'#queryLeftTable &gt; tr')
driver.implicitly_wait(0)# 先不加这个，发现特别慢
for one in theTrainLines:
    secondlevelseat = one.find_elements(By.CSS_SELECTOR,'td:nth-of-type(4)[class]')
    if secondlevelseat:
        print (one.find_element(By.CSS_SELECTOR,'td:nth-of-type(1) a').text)
driver.implicitly_wait(10)

driver.quit()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[偷税的垃圾作品（一）小游戏篇]]></title>
        <id>https://yuyue31.github.io/YlVTdfz_w/</id>
        <link href="https://yuyue31.github.io/YlVTdfz_w/">
        </link>
        <updated>2023-07-08T14:45:28.000Z</updated>
        <content type="html"><![CDATA[<p>这本来是一个作业，写的头疼，转到这里留档</p>
<p>#题目1：<br>
<img src="https://yuyue31.github.io//post-images/1688827796520.png" alt="" loading="lazy"></p>
<p>##下面是题目1的渣代码：</p>
<pre><code class="language-python">import random
from time import time
</code></pre>
<pre><code class="language-python">class Yang:
    name = '羊'

class Laohu:
    name = '老虎'


class Tizhong:
    def __init__(self):
        self.yangtizhong = 100
        self.laohutizhong = 200

    def laohu(self, chide):
        if self == &quot;老虎&quot;:
            if not chide == 'meat':
                self.laohutizhong -= 10
        else:
            self.laohutizhong += 10

    def yang(self, chide):

        if not chide == 'grass':
            self.yangtizhong -= 10
        else:
            self.yangtizhong += 10

    def qiaomen(self, name):
        if name == '羊':
            print('mie~~')
        else:
            print('Wow!!')
</code></pre>
<pre><code class="language-python">fangjian = {}
for i in range(10):

    shuzi = random.randint(0, 1)
    if shuzi == 1:
        fangjianlidedongwu = Yang.name
    else:
        fangjianlidedongwu = Laohu.name
    fangjian[i] = fangjianlidedongwu
    fangjianhao = i + 1
    dic = fangjianhao,fangjianlidedongwu



shijian = time()
fangjian = {}

while time() - shijian &lt;= 3 * 60:

    xunwen = input('敲门还是喂食：')
    if xunwen == '敲门':
        print(f'这是第{fangjianhao}号房间,{Tizhong.qiaomen}')
    elif xunwen == '喂食':
        shiwu = input('请输入meat或者grass：')
        if shiwu == 'meat' or &quot;grass&quot;:
            print()
</code></pre>
<p>##题目2：<br>
<img src="https://yuyue31.github.io//post-images/1688827966027.png" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688828019213.png" alt="" loading="lazy"></p>
<p>##以下是题目2的渣代码：</p>
<pre><code class="language-python">from random import randint
</code></pre>
<pre><code class="language-python">class player:  # 自定义玩家属性
    def __init__(self):
        self.lingshi = 1000
        self.duiwu = {}

    def duiwutianjia(self, gjb, ftb):
        self.duiwu['弓箭兵'] = gjb
        self.duiwu['斧头兵'] = ftb

    def kouqian(self, shuliang):
        self.lingshi -= shuliang


wo = player()  # 实例化


class senling1:  # 定义个森林
    def __init__(self, num, yaoguai):
        self.num = num
        self.animal = yaoguai


senling = []  # 把怪物放进森林
for i in range(7):  # 随机七个森林
    if randint(0, 1):  # 随机判断两选一
        ani = '狼妖'
    else:
        ani = '鹰妖'
    room = senling1(i, ani)  # 定义编号和怪物顺序
    senling.append(room)  # 把房间放进森林里

for i in senling:  # 把i定义成1
    i.num += 1
    print(f'这里第{i.num}森林,怪物是{i.animal}')


class gongjianbing:  # 定义弓箭手属性
    jiage = 100
    shengming = 100
    killlang = 80
    killying = 20

    def zhandou(self, yaoguai):
        if yaoguai == &quot;狼妖&quot;:
            self.shengming -= self.killlang
        else:
            self.shengming -= self.killying

    def __init__(self):
        self.zuidashengming = self.shengming

    def huixue(self, shuliang):
        if shuliang + gjblist[xuanmingzi].shengming &gt; self.zuidashengming:
            print('已经超过了最大生命值')
            return '错误'
        else:
            self.shengming += shuliang


class futoubing:  # 定义斧头兵属性
    jiage = 120
    shengming = 120
    killlang = 20
    killying = 80

    def zhandou(self, yaoguai):
        if yaoguai == &quot;狼妖&quot;:
            self.shengming -= self.killlang
        else:
            self.shengming -= self.killying

    def __init__(self):
        self.zuidashengming = self.shengming

    def huixue(self, shuliang):
        if shuliang + ftblist[xuanmingzi].shengming &gt; self.zuidashengming:
            print('已经超过了最大生命值')
            return '错误'
        else:
            self.shengming += shuliang
</code></pre>
<pre><code class="language-python">gjblist = {}  # 创建列表
while True:
    jige = int(input('请输入购买几个弓箭手'))
    if gongjianbing.jiage * jige &gt; wo.lingshi:  # 判断超过灵石数量结果
        print(f&quot;你没有足够的灵石，你还差{wo.lingshi - gongjianbing.jiage * jige}&quot;)
    else:
        wo.kouqian(shuliang=gongjianbing.jiage * jige)  # 扣钱
        for i in range(jige):
            while True:
                mingzi = str(input('给弓箭兵起个名字'))
                if gjblist.get(mingzi, '正确') == '正确':  # 判断是不是重复
                    gjblist[mingzi] = gongjianbing()
                    print(f'你的弓箭兵名字叫{mingzi}')
                    break
                else:
                    print('名字重复，请重新输入')
        print(f'你还剩下{wo.lingshi}')
        break

ftblist = {}  # 创建列表
while True:
    jige = int(input('请输入购买几个斧头兵'))
    if futoubing.jiage * jige &gt; wo.lingshi:
        print(f&quot;你没有足够的灵石，你目前只有{wo.lingshi}&quot;)
    else:
        wo.kouqian(shuliang=futoubing.jiage * jige)
        for i in range(jige):
            while True:
                mingzi = str(input('给斧头兵起个名字'))
                if ftblist.get(mingzi, '正确') == '正确':
                    ftblist[mingzi] = futoubing()
                    print(f'你的斧头兵名字叫{mingzi}')
                    break
                else:
                    print('名字重复，请重新输入')
        print(f'你还剩下{wo.lingshi}')
        break

for i in range(7):  # 七个森林
    if ftblist == {} and gjblist == {}:  # 判断列表有没有数据
        print('游戏结束')
        break
    guaiwu = senling[i].animal  # 对应怪物
    while True:
        shangchang = input(&quot;请问是出动弓箭兵还是斧头兵&quot;)
        if shangchang == '斧头兵':
            if ftblist == {}:
                print('您的斧头兵角色不存在或已全部阵亡')
            else:
                break
        elif shangchang == '弓箭兵':
            if gjblist == {}:
                print('您的弓箭兵角色不存在或已全部阵亡')
            else:
                break
        else:
            print('你啥都没有，结束了')
            break
    print(f'你选择出动{shangchang}')

    if shangchang == '弓箭兵':
        for j in gjblist.keys():
            print(f'你现在的{shangchang}队伍里，包含：{j}弓箭兵')
    elif shangchang == '斧头兵':
        for x in ftblist.keys():
            print(f'你现在的{shangchang}队伍里，包含：{x}斧头兵')
    while True:
        xuanmingzi = input('请选择一个角色出战')
        if shangchang == '弓箭兵' and gjblist != {} and ftblist != {}:
            if xuanmingzi in gjblist:
                print(f'你选择了一位名叫{xuanmingzi}的弓箭兵')
                break
        else:
            if xuanmingzi in ftblist:
                print(f'你选择了一位名叫{xuanmingzi}的斧头兵')
                break
</code></pre>
<pre><code class="language-python">    print('游戏开始')
    if shangchang == '斧头兵':
        ftblist[xuanmingzi].zhandou(yaoguai=guaiwu)  # 定义战斗判断
        if ftblist[xuanmingzi].shengming &gt; 0:
            print(
                f&quot;这里是第{senling[i].num}森林,怪物是{senling[i].animal},经过战斗，您的{xuanmingzi}斧头兵还剩下{ftblist[xuanmingzi].shengming}&quot;)

        else:
            print(f&quot;这里是第{senling[i].num}森林,怪物是{senling[i].animal},经过战斗，{xuanmingzi}斧头兵已阵亡，请换一个&quot;)
            del ftblist[xuanmingzi]
            continue
    else:
        gjblist[xuanmingzi].zhandou(yaoguai=guaiwu)
        if gjblist[xuanmingzi].shengming &gt; 0:
            print(
                f&quot;这里是第{senling[i].num}森林,怪物是{senling[1].animal},经过战斗，您的{xuanmingzi}弓箭兵还剩下{gjblist[xuanmingzi].shengming}&quot;)

        else:
            print(f&quot;这里是第{senling[i].num}森林,怪物是{senling[i].animal},经过战斗，{xuanmingzi}弓箭兵已阵亡，请换一个&quot;)
            del gjblist[xuanmingzi]
            continue
    huixue = input('是否回血（是/否）')
    if huixue == '是':
        while True:
            huixueliang = int(input(&quot;请输入回多少血&quot;))
            if huixueliang &gt; wo.lingshi:
                print('灵石不足')
            elif huixueliang &lt;= 0:
                print('请输入大于0的数')
            else:
                if shangchang == '弓箭兵':
                    if gjblist[xuanmingzi].huixue(shuliang=huixueliang) != '错误':
                        print(f'你的角色{xuanmingzi}生命值已经恢复到{gjblist[xuanmingzi].shengming}')
                        wo.kouqian(shuliang=huixueliang)
                        break
                elif shangchang == '斧头兵':
                    if ftblist[xuanmingzi].huixue(shuliang=huixueliang) != '错误':
                        print(f'你的角色{xuanmingzi}生命值已经恢复到{ftblist[xuanmingzi].shengming}')
                        wo.kouqian(shuliang=huixueliang)
                        break
    else:
        print(f'你还剩下{wo.lingshi}个灵石')
print(f'游戏结束，你还剩下{wo.lingshi}个灵石')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ziyii大佬的项目（一）python 的答题练习软件]]></title>
        <id>https://yuyue31.github.io/dqoFk0I9Z/</id>
        <link href="https://yuyue31.github.io/dqoFk0I9Z/">
        </link>
        <updated>2023-07-08T12:15:56.000Z</updated>
        <content type="html"><![CDATA[<p>欢迎来到ziyii大佬的专场 这是一个python的答题练习软件 希望各位喜欢</p>
<p>示例：<br>
<img src="https://yuyue31.github.io//post-images/1688820960094.png" alt="" loading="lazy"><br>
<img src="https://yuyue31.github.io//post-images/1688820966684.png" alt="" loading="lazy"></p>
<h1 id="pyside2-开发32位基于-python-的答题练习软件">pyside2 开发32位基于 python 的答题练习软件</h1>
<h2 id="开发环境">开发环境</h2>
<p>win11 家庭版 x64位版本</p>
<h2 id="配置环境">配置环境</h2>
<h3 id="安装-python38-32-位版本">安装 python3.8 32 位版本。</h3>
<p>官网下载链接：[https://www.python.org/downloads/windows/]<br>
(https://www.python.org/downloads/windows/)(python 官网下载链接)<br>
<img src="https://yuyue31.github.io//post-images/1688825198057.png" alt="" loading="lazy"><br>
选择32位版本，可以适配win7 32位版本电脑运行。</p>
<blockquote>
<p>安装包安装可以参考网上教程/一步一步的翻译安装选项。</p>
</blockquote>
<h3 id="安装-pyside2-库">安装 pyside2 库</h3>
<pre><code>pip3 install pyside2
备用：
pip install pyside2
</code></pre>
<blockquote>
<p>其他安装方式请参考网络教程</p>
</blockquote>
<h2 id="开发">开发</h2>
<h3 id="软件需求">软件需求</h3>
<ol>
<li>基本的ui界面。</li>
<li>可以随机出一道题。</li>
<li>记录答题正确次数和答题次数。</li>
<li>可以跳过某些题。</li>
<li>防止按钮误触</li>
<li>学习进度查看</li>
<li>……</li>
</ol>
<h3 id="绘制ui">绘制ui</h3>
<p>使用 pyside2 的 QT 设计师绘制ui界面。<br>
<img src="https://yuyue31.github.io//post-images/1688825331287.png" alt="" loading="lazy"></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1333545"><label class="task-list-item-label" for="task-item-1333545"> 基本的ui界面。</label></li>
</ul>
<h3 id="随机出题">随机出题</h3>
<p>首先确定我们的数据库。（我选择 py 自带的 sqlite3<br />然后是数据库的结构。<br>
<img src="https://yuyue31.github.io//post-images/1688825359556.png" alt="" loading="lazy"></p>
<p>随机当然是我们的 random 库出战啦。</p>
<p>接下来展示下大佬的源码：</p>
<pre><code class="language-python">from random import randint

def MakeQuestion(self):
    &quot;&quot;&quot;出题函数
    &quot;&quot;&quot;

    self.data = self.databaseQueries(
        'SELECT * FROM scores WHERE &quot;StatusCompletion&quot; = 0;')
    # 调用数据库查询，获取全部没通过的数据。
    dataListLongInt = len(self.data)
    dataRandint = randint(0, dataListLongInt - 1)
</code></pre>
<pre><code class="language-python">def problemProcessing(self, problemStr: str) -&gt; str:
    &quot;&quot;&quot;对题进行格式化

    Args:
        problemStr (str): 原始数据

    Returns:
        str: 格式化后的数据
    &quot;&quot;&quot;
    problemStr = problemStr[problemStr.find('、') + 1:]
    problemStr = problemStr.replace('A.', '\n\nA.')
    problemStr = problemStr.replace('B.', '\nB.')
    problemStr = problemStr.replace('C.', '\nC.')
    problemStr = problemStr.replace('D.', '\nD.')
    problemStr = problemStr.replace('E.', '\nE.')
    problemStr = problemStr.replace('F.', '\nF.')
    return problemStr

def answerProcessing(self, answer: str) -&gt; str:
    &quot;&quot;&quot;对答案进行格式化

    Args:
        answer (str): 原始数据

    Returns:
        str: 格式化后的数据
    &quot;&quot;&quot;
    answer = answer.replace(' ', '')
    if answer[-1:] == ';':
        return answer[:-1]
    else:
        return answer
</code></pre>
<pre><code class="language-python">self.id = self.data[dataRandint][0]
# 数据库中的id（方便后期的内容修改。
problem = self.problemProcessing(self.data[dataRandint][1])
# 题目数据处理后放到变量中。
self.answer = self.answerProcessing(self.data[dataRandint][2])
# 答案处理（主要是有的答案格式不太好，得修修。
self.NumberOfCorrectAnswers = self.data[dataRandint][3]
# 这个是答对次数
self.NumberOfAnswers = self.data[dataRandint][4]
# 题目的答题次数
</code></pre>
<pre><code class="language-python">self.ui.lineEdit.setText(
    f'当前问题 答对次数：{self.NumberOfCorrectAnswers} 答题次数：{self.NumberOfAnswers}'
)
</code></pre>
<pre><code class="language-python">if len(self.answer) == 1:
    typeOfQuestion = '单选题：'
    self.ui.buttonGroup.setExclusive(True)
else:
    typeOfQuestion = '多选题：'
self.ui.plainTextEdit.setPlainText(typeOfQuestion + '\n')
self.ui.plainTextEdit.appendPlainText(problem)
# 输出ui界面
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4966120"><label class="task-list-item-label" for="task-item-4966120"> 可以随机出一道题。</label></li>
</ul>
<h3 id="对错判断">对错判断</h3>
<pre><code class="language-python">def TurnPapersAnswer(self) -&gt; str:
    &quot;&quot;&quot;根据勾选框获取格式化后的答案并返回数据

    Returns:
        str: 勾选框转成答案的格式
    &quot;&quot;&quot;
    answer = []
    checkBoxList = {
        self.ui.checkBoxA: 'A',
        self.ui.checkBoxB: 'B',
        self.ui.checkBoxC: 'C',
        self.ui.checkBoxD: 'D',
        self.ui.checkBoxE: 'E',
        self.ui.checkBoxF: 'F'
    }
    for i in checkBoxList:
        if i.isChecked():
            answer.append(checkBoxList[i])
    return ';'.join(answer)
</code></pre>
<pre><code class="language-python">def TurnPapers(self):
    &quot;&quot;&quot;确定按钮的绑定函数
    &quot;&quot;&quot;
    if time() - self.turnTime &lt; 1:
        return
    # 根据时间戳来判断是否是误触
    # 需要 time 库
    self.turnTime = time()
    # 重置时间戳
    answer = self.TurnPapersAnswer()
    # 获取答案
    if answer == '':
        pass
        # 答案是空一定是误触啦
    elif answer == self.answer:
        if self.selection: # 这里判断本回合内是不是第一次答对，是就写入数据库数据，不是就只跳过
            self.nextProblemInit()
        else:
            self.NumberOfCorrectAnswers += 1
            self.NumberOfAnswers += 1
            self.databaseQueries(f'''UPDATE scores
SET &quot;答对次数&quot; = {self.NumberOfCorrectAnswers}, &quot;答题次数&quot; = {self.NumberOfAnswers}
WHERE id = {self.id};''')
            if self.NumberOfAnswers &gt;= 3 and self.NumberOfCorrectAnswers / self.NumberOfAnswers &gt; 0.7:
                # 如果第一次答对了，然后答对次数到达一定次数和正确率，则判断会了。
                self.databaseQueries(f'''UPDATE scores
SET &quot;StatusCompletion&quot; = 1
WHERE id = {self.id};''')
            self.nextProblemInit()
    else: # 答错之后
        self.selection = True
        self.ui.plainTextEdit.appendPlainText('\n正确答案：' + self.answer)
        self.messageBox.information(self.ui, '答案', '正确答案：' + self.answer)
        self.databaseQueries(f'''UPDATE scores
SET &quot;答题次数&quot; = {self.NumberOfAnswers + 1}
WHERE id = {self.id};''')
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-26292"><label class="task-list-item-label" for="task-item-26292"> 记录答题正确次数和答题次数。</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9857119"><label class="task-list-item-label" for="task-item-9857119"> 防止按钮误触</label></li>
</ul>
<h3 id="跳过题">跳过题</h3>
<pre><code class="language-python">def nextProblemInit(self):
    &quot;&quot;&quot;下一题 初始化
    &quot;&quot;&quot;
    self.ui.buttonGroup.setExclusive(False)
    self.checkBoxInit()
    self.MakeQuestion()
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4867107"><label class="task-list-item-label" for="task-item-4867107"> 可以跳过某些题。</label></li>
</ul>
<h3 id="学习进度查看">学习进度查看</h3>
<pre><code class="language-python">def learningInformation(self):
    &quot;&quot;&quot;学习进度计算
    &quot;&quot;&quot;
    NumberOfCorrectAnswers = 0
    NumberOfAnswers = 0
    completionsCount = 0
    for i in self.databaseQueries('SELECT * FROM scores;'):
        NumberOfCorrectAnswers += i[3]
        NumberOfAnswers += i[4]
        completionsCount += i[5]
    self.ui.lineEdit.setText(
        f'全部问题 答对次数：{NumberOfCorrectAnswers} 答题次数：{NumberOfAnswers} 完成数：{completionsCount}'
    )
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6053385"><label class="task-list-item-label" for="task-item-6053385"> 学习进度查看</label></li>
</ul>
<h2 id="整合一下">整合一下。</h2>
<pre><code class="language-python">from PySide2.QtWidgets import QApplication, QMainWindow, QMessageBox
from PySide2.QtUiTools import QUiLoader
from PySide2.QtCore import QCoreApplication, Qt
from PySide2.QtGui import QIcon
from sqlite3 import connect
from random import randint
from time import time
from os import system


class MyWindow(QMainWindow):

    def __init__(self) -&gt; None:
        super().__init__()
        self.ui = QUiLoader().load('./dataFormZiyii/ui/mainWindow.ui')
        self.ui.setWindowTitle('答题程序 - ziyii 0.0.3')
        self.ui.buttonGroup.setExclusive(False)
        self.messageBox = QMessageBox()
        self.data = self.databaseQueries('SELECT * FROM scores;')
        self.turnTime = time()
        self.bind()
        self.MakeQuestion()

    def bind(self):
        &quot;&quot;&quot;事件绑定函数
        &quot;&quot;&quot;
        self.ui.pushButtonDetermine.clicked.connect(self.TurnPapers)
        self.ui.pushButtonIgnore.clicked.connect(self.Ignore)
        self.ui.pushButtonClearOut.clicked.connect(self.checkBoxInit)
        self.ui.pushButtonLearningInformation.clicked.connect(
            self.learningInformation)
        self.ui.pushButtonPass.clicked.connect(lambda: self.nextProblemInit())
        self.ui.actionHelp.triggered.connect(
            lambda: self.messageBox.information(
                self.ui, '帮助', '''帮助：
点击下边的勾选框，选择完毕之后点击确定。
如果答题正确自动跳转下一题，答题错误则会提示正确答案。
此时你应该将错误答案更改，然后再点击确定。
--- &lt;-_-&gt; ---
勾选框边上的清空按钮可以将勾选恢复默认。
最边上的忽略则会永久忽略本题，请谨慎使用。'''))
        self.ui.actionAuthor.triggered.connect(
            lambda: system('start http://ziyii.top'))

    def learningInformation(self):
        &quot;&quot;&quot;学习进度计算
        &quot;&quot;&quot;
        NumberOfCorrectAnswers = 0
        NumberOfAnswers = 0
        completionsCount = 0
        for i in self.databaseQueries('SELECT * FROM scores;'):
            NumberOfCorrectAnswers += i[3]
            NumberOfAnswers += i[4]
            completionsCount += i[5]
        self.ui.lineEdit.setText(
            f'全部问题 答对次数：{NumberOfCorrectAnswers} 答题次数：{NumberOfAnswers} 完成数：{completionsCount}'
        )

    def Ignore(self):
        &quot;&quot;&quot;忽略按钮对应事件函数
        &quot;&quot;&quot;
        self.databaseQueries(f'''UPDATE scores
SET &quot;StatusCompletion&quot; = 1
WHERE id = {self.id};''')
        self.nextProblemInit()

    def nextProblemInit(self):
        &quot;&quot;&quot;下一题 初始化
        &quot;&quot;&quot;
        self.ui.buttonGroup.setExclusive(False)
        self.checkBoxInit()
        self.MakeQuestion()

    def checkBoxInit(self):
        &quot;&quot;&quot;清空勾选框函数
        &quot;&quot;&quot;
        self.ui.checkBoxF.setChecked(False)
        self.ui.checkBoxE.setChecked(False)
        self.ui.checkBoxD.setChecked(False)
        self.ui.checkBoxC.setChecked(False)
        self.ui.checkBoxB.setChecked(False)
        self.ui.checkBoxA.setChecked(False)

    def TurnPapersAnswer(self) -&gt; str:
        &quot;&quot;&quot;根据勾选框获取格式化后的答案并返回数据

        Returns:
            str: 勾选框转成答案的格式
        &quot;&quot;&quot;
        answer = []
        checkBoxList = {
            self.ui.checkBoxA: 'A',
            self.ui.checkBoxB: 'B',
            self.ui.checkBoxC: 'C',
            self.ui.checkBoxD: 'D',
            self.ui.checkBoxE: 'E',
            self.ui.checkBoxF: 'F'
        }
        for i in checkBoxList:
            if i.isChecked():
                answer.append(checkBoxList[i])
        return ';'.join(answer)

    def TurnPapers(self):
        &quot;&quot;&quot;确定按钮的绑定函数
        &quot;&quot;&quot;
        if time() - self.turnTime &lt; 1:
            return
        self.turnTime = time()
        answer = self.TurnPapersAnswer()
        if answer == '':
            pass
        elif answer == self.answer:
            if self.selection:
                self.nextProblemInit()
            else:
                self.NumberOfCorrectAnswers += 1
                self.NumberOfAnswers += 1
                self.databaseQueries(f'''UPDATE scores
SET &quot;答对次数&quot; = {self.NumberOfCorrectAnswers}, &quot;答题次数&quot; = {self.NumberOfAnswers}
WHERE id = {self.id};''')
                if self.NumberOfAnswers &gt;= 3 and self.NumberOfCorrectAnswers / self.NumberOfAnswers &gt; 0.7:
                    self.databaseQueries(f'''UPDATE scores
SET &quot;StatusCompletion&quot; = 1
WHERE id = {self.id};''')
                self.nextProblemInit()
        else:
            self.selection = True
            self.ui.plainTextEdit.appendPlainText('\n正确答案：' + self.answer)
            self.messageBox.information(self.ui, '答案', '正确答案：' + self.answer)
            self.databaseQueries(f'''UPDATE scores
SET &quot;答题次数&quot; = {self.NumberOfAnswers + 1}
WHERE id = {self.id};''')

    def problemProcessing(self, problemStr: str) -&gt; str:
        &quot;&quot;&quot;对题进行格式化

        Args:
            problemStr (str): 原始数据

        Returns:
            str: 格式化后的数据
        &quot;&quot;&quot;
        problemStr = problemStr[problemStr.find('、') + 1:]
        problemStr = problemStr.replace('A.', '\n\nA.')
        problemStr = problemStr.replace('B.', '\nB.')
        problemStr = problemStr.replace('C.', '\nC.')
        problemStr = problemStr.replace('D.', '\nD.')
        problemStr = problemStr.replace('E.', '\nE.')
        problemStr = problemStr.replace('F.', '\nF.')
        return problemStr

    def answerProcessing(self, answer: str) -&gt; str:
        &quot;&quot;&quot;对答案进行格式化

        Args:
            answer (str): 原始数据

        Returns:
            str: 格式化后的数据
        &quot;&quot;&quot;
        answer = answer.replace(' ', '')
        if answer[-1:] == ';':
            return answer[:-1]
        else:
            return answer

    def MakeQuestion(self):
        &quot;&quot;&quot;出题函数
        &quot;&quot;&quot;
        self.selection = False
        self.data = self.databaseQueries(
            'SELECT * FROM scores WHERE &quot;StatusCompletion&quot; = 0;')
        if self.data == []:
            self.ui.lineEdit.setText(f'*★,°*:.☆(￣▽￣)/$:*.°★* 。')
            self.ui.plainTextEdit.setPlainText('没有啦！恭喜你全部通过啦！')
            return
        dataListLongInt = len(self.data)
        dataRandint = randint(0, dataListLongInt - 1)
        self.id = self.data[dataRandint][0]
        problem = self.problemProcessing(self.data[dataRandint][1])
        self.answer = self.answerProcessing(self.data[dataRandint][2])
        self.NumberOfCorrectAnswers = self.data[dataRandint][3]
        self.NumberOfAnswers = self.data[dataRandint][4]
        self.ui.lineEdit.setText(
            f'当前问题 答对次数：{self.NumberOfCorrectAnswers} 答题次数：{self.NumberOfAnswers}'
        )
        if len(self.answer) == 1:
            typeOfQuestion = '单选题：'
            self.ui.buttonGroup.setExclusive(True)
        else:
            typeOfQuestion = '多选题：'
        self.ui.plainTextEdit.setPlainText(typeOfQuestion + '\n')
        self.ui.plainTextEdit.appendPlainText(problem)

    def databaseQueries(self, sql: str) -&gt; list:
        &quot;&quot;&quot;数据库读写

        Args:
            sql (str): 传入的SQL语句

        Returns:
            list: 返回数据列表
        &quot;&quot;&quot;
        conn = connect('./dataFormZiyii/db/problemDb.db')
        cursor = conn.cursor()
        try:
            cursor.execute(sql)
            returningData = cursor.fetchall()
        except Exception as e:
            self.messageBox.information(self.ui, '错误', f'数据库加载错误：\n{e}')
            returningData = []
            conn.rollback()
        conn.commit()
        conn.close()
        return returningData


if __name__ == '__main__':
    QCoreApplication.setAttribute(Qt.AA_ShareOpenGLContexts)
    app = QApplication([])
    app.setWindowIcon(QIcon('./dataFormZiyii/ico/ziyii.ico'))
    window = MyWindow()
    window.ui.show()
    app.exec_()

</code></pre>
<h2 id="打包">打包</h2>
<pre><code>|-main
|  |-dataFromZiyii
|  |	|-db
|  |  |	|-problemDb.db
|  |	|-ico
|  |  |	|-ziyii.ico
|  |	|-ui
|  |  	|-mainWindow.ui
|	 |-mainWindow.py
</code></pre>
<p>使用 pyinstaller 打包。</p>
<pre><code>pip3 install pyinstaller
备用：
pip install pyinstaller
</code></pre>
<pre><code>pyinstaller mainWindow.py --noconsole --clean --hidden-import PySide2.QtXml --icon=&quot;./dataFormZiyii/ico/ziyii.ico&quot;
</code></pre>
<p>接下来是大佬的碎碎念：<br>
为什么还有用 win7 32 位版本的啊～！<br>
萝莉图可以留我邮箱  temp@ziyii.top</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍下美工大佬——Rosalindlo(罗萨琳)]]></title>
        <id>https://yuyue31.github.io/aDcfZzqnH/</id>
        <link href="https://yuyue31.github.io/aDcfZzqnH/">
        </link>
        <updated>2023-07-07T16:31:38.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://yuyue31.github.io//post-images/1688747522522.jpg" alt="" loading="lazy"><br>
这位是御用的美工大佬❗️❗️❗️❗️</p>
<p>动物名:Rosalindlo(罗萨琳)<br>
性别:安能辨我是雄雌<br>
种族:设计狮<br>
出没时间:24小时概率触发<br>
喜欢的东西（在群里面投放以下物品有概率提升此动物的出现概率）:雷电影或夜兰姐姐的涩图/新鲜的小刻1只/野生的愉悦<br>
讨厌的东西:翠镐/死线/蓝瓶<br>
动物叫声:哈喽大家好呀我是Rosalin<sub>参与到小刻bot成长过程中并且能奉上自己的一份力量我很高兴desu</sub>平面设计顽强绝赞自习中，希望你能喜欢我的设计！</p>
<p>⬆️以上是大佬的介绍，记得看到这位大佬多给他发点色图❗️❗️❗️</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍下技术大佬——ziyii]]></title>
        <id>https://yuyue31.github.io/76tsAhbnM/</id>
        <link href="https://yuyue31.github.io/76tsAhbnM/">
        </link>
        <updated>2023-07-03T14:59:02.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://yuyue31.github.io//post-images/1688396425899.png" alt="" loading="lazy"><br>
此人爱好：萝莉，建议看到这位，直接发相关的图就行，包括但不限于草神，可莉，七七等，建议私发<br>
<img src="https://yuyue31.github.io//post-images/1688396546552.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>